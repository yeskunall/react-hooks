import { exec } from "node:child_process"
import { promises as fs } from "node:fs"
import path from "node:path"

import registry from "../registry/index.js"

import type { RegistryItem } from "../registry/schema.js"

// TODO(yeskunall): make it configurable?
const INDEX_FILE_PATH = path.join(process.cwd(), "__registry__/index.tsx")
const REGISTRY_JSON_FILE_PATH = "apps/docs/public/r/index.json"
const REGISTRY_JSON_PATH = path.join(process.cwd(), REGISTRY_JSON_FILE_PATH)
const REGISTRY_OUTPUT_PATH = "apps/docs/public/r/hooks"

/**
 * Builds the index.tsx file for the registry with lazy-loaded components.
 * Uses an array to construct the string efficiently and asynchronous file operations.
 */
async function buildRegistryIndex(): Promise<void> {
  await fs.unlink(INDEX_FILE_PATH).catch(() => {})

  const parts = [
    `// @ts-nocheck\n// This file is autogenerated by scripts/build-registry.ts\n// Do not edit this file directly.\nimport * as React from "react"\n\nexport const Index: Record<string, any> = {`,
  ]

  for (const item of registry.items) {
    const resolveFiles = item.files?.map(
      file => `registry/${typeof file === "string" ? file : file.path}`,
    )

    if (!resolveFiles) continue

    const sourceFilename = ""

    let hookPath = ""

    if (item.files?.length) {
      const files = item.files.map(file =>
        typeof file === "string" ? { type: "registry:page", path: file } : file,
      )

      const subParts
        = (files[0].path.split("/").length ?? 0) > 3
          ? files[0].path.split("/").slice(2, -1).join("/") + "/"
          : ""

      const demoExists = registry.items.some(
        i => i.name === `${item.name}-demo`,
      )

      hookPath
        = item.type !== "registry:example"
          && !item.name.includes("-demo")
          && demoExists
          ? `registry/examples/${subParts}${item.name}-demo`
          : files[0].path
    }

    parts.push(`
  "${item.name}": {
    name: "${item.name}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `registry/${typeof file === "string" ? file : file.path}`
      const resolvedFilePath = path.resolve(filePath)
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${file.path}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`
    })}],
    component: React.lazy(() => import("${hookPath}")),
    source: "${sourceFilename}",
  },`)
  }

  parts.push(`\n}\n`)
  const indexContent = parts.join("")
  await fs.writeFile(INDEX_FILE_PATH, indexContent, "utf8")
}

async function buildRegistryJsonFile(): Promise<void> {
  await fs.unlink(REGISTRY_JSON_PATH).catch(() => {})

  const fixedRegistry = {
    $schema: "https://ui.shadcn.com/schema/registry.json",
    ...registry,
    items: registry.items
      .filter((item: RegistryItem) => item.type !== "registry:example")
      .map((item: RegistryItem) => ({
        ...item,
        files: item.files?.map(file => ({
          type: file.type,
          path: file.path,
        })),
      })),
  }

  await fs.mkdir(path.dirname(REGISTRY_JSON_PATH), { recursive: true })
  await fs.writeFile(
    REGISTRY_JSON_PATH,
    JSON.stringify(fixedRegistry, null, 2),
    "utf8",
  )
}

async function buildRegistry(): Promise<void> {
  return new Promise((resolve, reject) => {
    const process = exec(
      `pnpm exec shadcn build ${REGISTRY_JSON_FILE_PATH} --output ${REGISTRY_OUTPUT_PATH}`,
    )

    process.on("exit", (code) => {
      if (code === 0) resolve()
      else reject(new Error(`Process exited with code ${code}`))
    })
  })
}

;(async () => {
  try {
    console.log("üóÇÔ∏è Building __registry__/index.tsx...")
    const indexPromise = buildRegistryIndex()

    console.log("üíÖ Building registry.json...")
    const jsonPromise = buildRegistryJsonFile()

    await Promise.all([indexPromise, jsonPromise])

    console.log("üöÄ Building registry...")
    await buildRegistry()

    console.log("‚úÖ Build completed successfully.")
  }
  catch (error) {
    console.error("‚ùå Build failed:", error)
    process.exit(1)
  }
})()
