{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-set",
  "type": "registry:hook",
  "files": [
    {
      "path": "registry/hooks/use-set/index.ts",
      "content": "import { useCallback, useRef, useState } from \"react\"\n\nexport interface UseSetReturn<T> {\n  set: Readonly<Set<T>>\n  add: (key: T) => void\n  clear: () => void\n  remove: (key: T) => void\n  reset: () => void\n  toggle: (key: T) => void\n}\n\n/**\n * Manage a JavaScript `Set` of items with additional utility methods.\n *\n * @typeParam T - Type of values stored in the `Set`\n *\n * @param `initialState` - Optional iterable used to initialize the `Set`. If omitted, the set starts empty.\n * @returns An object with the following properties:\n * - `set`: Current set of items\n * - `add`: Function that adds an item to the set\n * - `clear`: Function that removes all items from the set\n * - `remove`: Function that removes an from the set\n * - `reset`: Function that resets the set back to `initialState`\n * - `toggle`: Adds the item if it doesnâ€™t exist, or removes it if it does\n *\n * @example\n * ```tsx\n * function TagsSelector() {\n *   const { set, add, remove, toggle, reset, clear } = useSet<string>([\"react\", \"typescript\"])\n *\n *   return (\n *     <div>\n *       <button onClick={() => toggle(\"react\")}>Toggle React</button>\n *       <button onClick={() => toggle(\"vue\")}>Toggle Vue</button>\n *       <button onClick={reset}>Reset</button>\n *       <button onClick={clear}>Clear</button>\n *\n *       <ul>\n *         {[...set].map(tag => <li key={tag}>{tag}</li>)}\n *       </ul>\n *     </div>\n *   )\n * }\n * ```\n */\nexport function useSet<T>(\n  initialState = new Set<T>(),\n): UseSetReturn<T> {\n  const ref = useRef(initialState)\n  const [set, setSet] = useState<Set<T>>(ref.current)\n\n  const add = useCallback((item: T) => {\n    setSet(prev => new Set(prev).add(item))\n  }, [])\n\n  const clear = useCallback(() => {\n    setSet(new Set())\n  }, [])\n\n  const remove = useCallback((item: T) => {\n    setSet((prev) => {\n      const next = new Set(prev)\n      next.delete(item)\n      return next\n    })\n  }, [])\n\n  const reset = useCallback(() => {\n    setSet(ref.current)\n  }, [])\n\n  const toggle = useCallback((item: T) => {\n    setSet((prev) => {\n      const next = new Set(prev)\n      if (next.has(item)) {\n        next.delete(item)\n      }\n      else {\n        next.add(item)\n      }\n\n      return next\n    })\n  }, [])\n\n  return {\n    set,\n    add,\n    clear,\n    remove,\n    reset,\n    toggle,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}